version: '3.9'

services:
  db:
    container_name: postgres
    image: postgres:14-bullseye
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - ${POSTGRES_PORT}:5432
    networks:
      - api-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready --dbname=${POSTGRES_DB} --username=${POSTGRES_USER} --host=localhost --port=5432"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s
    volumes:
      - ./data/db:/var/lib/postgresql/data
  redis:
    container_name: redis
    image: redis:7.0-rc-bullseye
    restart: always
    ports:
      - ${REDIS_PORT}:6379
    networks:
      - api-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
  api:
    container_name: api-server
    restart: always
    environment:
      - NODE_ENV=${NODE_ENV}
      - API_PORT=${API_PORT}
      - SALT_ROUNDS=${SALT_ROUNDS}
      - POSTGRES_HOST=db
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PORT=5432
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    build:
      context: /server
      dockerfile: dockerfile
    ports:
      - ${API_PORT}:${API_PORT}
    networks:
      - api-network
  client:
    container_name: react-client
    restart: always
    ports:
      - ${REACT_PORT}:80
    depends_on:
      - api
    build:
      context: /client
      dockerfile: dockerfile
networks:
  api-network:
    driver: bridge